#!/usr/bin/env python
PACKAGE = "k_nearest"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("distance_difference",    int_t,    0, "Distance difference to configure cut off before adjusting multiplier", 1000,  0, 10000)
gen.add("distance_difference_manual_mode",   bool_t,   0, "Manually set distance difference",  False)

gen.add("distance_limit_filter",    double_t,    0, "Distance limit to decide the cut off before a color is too far behind", 362,  0, 362)
gen.add("distance_limit_filter_manual_mode",   bool_t,   0, "Manually set distance limiter",  False)

gen.add("speed_of_adjustment",    double_t,    0, "Distance limit to decide the cut off before a color is too far behind", 0.1,  0.001 , 1)

color_enum = gen.enum([ gen.const("PURE_RED",      int_t, 0, "To detect colors closests to pure red"),
                       gen.const("PURE_GREEN",     int_t, 1, "To detect colors closests to pure green"),
                       gen.const("PURE_BLUE",      int_t, 2, "To detect colors closests to pure blue"),
                       gen.const("WEIRD_RED", int_t, 3, "weird_red"),
                       gen.const("WEIRD_GREEN",    int_t, 4, "weird_green"),
                       gen.const("WEIRD_BLUE",    int_t, 5, "weird_blue"),
                       gen.const("WEIRD_YELLOW",    int_t, 6, "weird_yellow"),
                       gen.const("BRIGHTER_BLUE",    int_t, 7, "BRIGHTER_BLUE"),
                       gen.const("PURE_YELLOW",    int_t, 8, "PURE_YELLOW")],
                     "An enum of colors")

gen.add("color_selection", int_t, 0, "Color choices", 0, 0, 8, edit_method=color_enum)

gen.add("manual_color_set",   bool_t,   0, "Manually set lab colors",  False)
gen.add("L",    double_t,    0, "L from LAB Color space", 0,  0, 255)
gen.add("A",    double_t,    0, "A from LAB Color space", 0,  0, 255)
gen.add("B",    double_t,    0, "B from LAB Color space", 0,  0, 255)


exit(gen.generate(PACKAGE, "k_nearest_wilson", "k_nearest"))
